#include "LPC17xx.h"
#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_timer.h"
#include "LPC17xx_clkpwr.h"
void delay(uint32_t times);
void Configpins(){
	PINSEL_CFG_Type pinselCfg;
	pinselCfg.Portnum = 3;
	pinselCfg.Pinnum = 26;
	pinselCfg.Funcnum = 0;
	pinselCfg.Pinmode = PINSEL_PINMODE_NORMAL;

	PINSEL_ConfigPin(&pinselCfg);

	GPIO_SetDir(3, (1<<26), 1);
}
void Config_timer(){
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER0, CLKPWR_PCLKSEL_CCLK_DIV_1); // Selecciono como fuente el clock sin divisiones
	TIM_TIMERCFG_Type timer_cfg;
	timer_cfg.PrescaleOption = TIM_PRESCALE_USVAL; // Para valores de tick
	timer_cfg.PrescaleValue = 10000000; // tiempo 0.5 segundo
	TIM_Init(LPC_TIM0, TIM_TIMER_MODE , &timer_cfg);
	TIM_MATCHCFG_Type match_cfg;
	match_cfg.MatchChannel = 0;
	match_cfg.IntOnMatch = ENABLE;
	match_cfg.StopOnMatch = DISABLE;
	match_cfg.MatchValue = 1;// tinterr = tquiero* (Mv+1)
	match_cfg.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
	match_cfg.ResetOnMatch = ENABLE;
	TIM_ConfigMatch(LPC_TIM0, &match_cfg);
	TIM_Cmd(LPC_TIM0, ENABLE);
	NVIC_EnableIRQ(TIMER0_IRQn);
}

int main(void){
	GPIO_ClearValue(0, (1<<22));
	Configpins();
	Config_timer();
	while(1){
	}


    return 0 ;
}
void TIMER0_IRQHandler(void){
	(GPIO_ReadValue(3)& (1<<26)) ? GPIO_ClearValue(3, (1<<26)) : GPIO_SetValue(3, (1<<26));
	TIM_ClearIntPending(LPC_TIM0, TIM_MR0_INT);
	}
