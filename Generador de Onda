#include "LPC17xx.h"
#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_timer.h"
#include "LPC17xx_clkpwr.h"

#define size 932;

uint16_t signal[size];

uint16_t pote;

void config_pin(){

//Primero AD0.0 y luego AOUT para el dac

PINSEL_CFG_Type pincfg;

pincfg.PortNum=0;

pincfg.PinNum=23;

pincfg.PinMode=PINSEL_PINMODE_TRISTATE;

pincfg.FuncNum= 1;

pincfg.OpenDrain= PINSEL_PINMODE_NORMAL;

PINSEL_ConfigPin(&pincfg);

//para AOUT

pincfg.PinNum=26;

pincfg.FuncNum=2;

PINSEL_ConfigPin(&pincfg);

}

void GenerarSeñal(){

for (i=0;i<466;i++){

signal[i]=310+i;

}

for (j=0;i<465;j++){

signal[j+466]=j;

}

}



void configADC(){

ADC_ChannelCmd(LPC_ADC, 0);

ADC_StartCmd(LPC_ADC, ADC_START_CONTINUOUS);

ADC_BurstCmd(LPC_ADC,ENABLE);

ADC_Init(LPC_ADC,100);

ADC_IntConfig(LPC_ADC,ADINTEN0,ENABLE);

}

void configDAC(){

DAC_CONVERTER_CFG_Type daccfg;

daccfg.CNT_ENA=ENABLE;

daccfg.DMA_ENA=ENABLE;

DAC_Init(LPC_DAC);

DAC_SetBias(LPC_DAC,0);

DAC_SetDMATimeOut(LPC_DAC,4032);

}

void configDMA(){//M2P

GPDMA_LLI_Type LLI1;

LLI1.SrcAddr = (uint16_t) signal;

LLI1.DstAddr = (uint32_t) &LPC_DAC->DACR;

LLI1.NextLLI = (uint32_t) &LLI1;

LLI1.Control = DMA_SIZE

| (1<<18) //source width 16 bits

| (2<<21) //dest width 32 bits

| (1<<26); //source increment



GPDMA_Init();



GPDMA_Channel_CFG_Type GPDMACfg;

GPDMACfg.ChannelNum = 0;

GPDMACfg.SrcMemAddr = (uint16_t)signal;

GPDMACfg.DstMemAddr = 0;

GPDMACfg.TransferSize = size; //930 o 932 capaz le pifie

GPDMACfg.TransferWidth = 0;

GPDMACfg.TransferType = GPDMA_TRANSFERTYPE_M2P;

GPDMACfg.SrcConn = 0;

GPDMACfg.DstConn = GPDMA_CONN_DAC;

GPDMACfg.DMALLI = (uint32_t)&LLI1;

GPDMA_Setup(&GPDMACfg);



}

int main(void){

void GenerarSeñal();

void configADC();

void configDAC();

void configDMA;

while(1){

//

}


return 0;


}

void ADC_IRQHandler(){

pote=ADC_ChannelGetData(LPC_ADC,0);

DAC_SetDMATimeOut(LPC_DAC, pote);

}
